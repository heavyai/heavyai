name: HeavyAI test

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  pull_request:
    branches:
      - main

# kill any previous running job on a new commit
concurrency:
  group: build-and-test-heavyai-${{ github.head_ref }}
  cancel-in-progress: true

jobs:

  heavyai:
    name: Heavydb ${{ matrix.heavydb-version }} - ${{ matrix.os }} - Python v${{ matrix.python-version }} [${{ matrix.heavydb-from }}]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.10'
            docker-image: heavyai/core-os-cpu:latest
            heavydb-from: docker
          - os: ubuntu-latest
            python-version: '3.10'
            heavydb-from: conda

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channel-priority: strict
          channels: conda-forge

      - name: Install mamba
        shell: bash -l {0}
        run: |
          conda install mamba -c conda-forge

      - name: Configure miniconda
        shell: bash -l {0}
        run: |
          conda env config vars set MAMBA_NO_BANNER=1

      # heavydb must be run in an environment that is independent of heavyai environment
      - name: Install heavydb v${{ matrix.heavydb-version }} [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'conda'
        run: |
          mamba create -n heavydb-env heavydb=*=*_cpu -c conda-forge

      - name: Build heavydb docker image and run it [docker]
        shell: bash -l {0}
        env:
          HEAVYDB_DOCKER_IMAGE: ${{ matrix.docker-image }}
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'docker'
        run: |
          # force docker-compose installation
          mamba create -n docker docker-compose -c conda-forge
          # run docker services
          mamba run -n docker docker-compose build
          mamba run -n docker docker-compose up -d
          sleep 20

      - name: heavydb-env conda list [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'conda'
        run: |
          mamba run -n heavydb-env conda list

      - name: Start heavydb [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'conda'
        run: |
          mkdir storage
          mamba run -n heavydb-env initheavy storage -f
          mamba run -n heavydb-env heavydb --version
          mamba run -n heavydb-env heavydb &> heavydb-output.txt &
          sleep 10

      - name: Create heavyai test environment
        shell: bash -l {0}
        run: |
          mamba env create --file=ci/environment.yml -n heavyai

      - name: heavyai conda config
        shell: bash -l {0}
        run: |
          mamba run -n heavyai conda config --show

      - name: heavyai conda list
        shell: bash -l {0}
        run: |
          mamba run -n heavyai conda list

      # - name: Develop heavyai
      #   shell: bash -l {0}
      #   run: |
      #     mamba run -n heavyai python setup.py develop

      - name: Run heavyai tests [docker]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'docker'
        run: |
          mamba run -n heavyai pytest -sv -r A tests/ -x

      - name: Run heavyai tests
        shell: bash -l {0}
        if: ${{ ! ( matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'docker' ) }}
        run: |
          mamba run -n heavyai pytest -sv -r A tests/ -x

      - name: Show Heavydb conda logs on failure [conda]
        shell: bash -l {0}
        if: failure() && matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'conda'
        run: |
          mamba run -n heavydb-env cat storage/mapd_log/heavydb.INFO
          mamba run -n heavydb-env cat storage/mapd_log/heavydb.WARNING
          mamba run -n heavydb-env cat storage/mapd_log/heavydb.ERROR

      - name: Show Heavydb docker logs on failure [docker]
        shell: bash -l {0}
        if: failure() && matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'docker'
        run: |
          mamba run -n docker docker-compose top  # to check if server is still alive
          mamba run -n docker docker-compose exec -T ls

      - name: Stop Heavydb server [conda]
        shell: bash -l {0}
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'conda'
        run: |
          mamba run -n heavydb-env killall heavydb
          sleep 5

      - name: Show Heavydb server output [conda]
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'conda'
        run: |
          cat heavydb-output.txt

      - name: Show Heavydb docker logs on failure [docker]
        shell: bash -l {0}
        timeout-minutes: 2
        if: ${{ failure() && matrix.os == 'ubuntu-latest' && matrix.heavydb-from == 'docker' }}
        run: |
          mamba run -n docker docker-compose logs --no-color --tail=10000 -f -t \> heavydb-docker.log
          cat heavydb-docker.log
